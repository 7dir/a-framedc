{"version":3,"sources":["webpack:///webpack/bootstrap fe3e26e3a2c6f7575629","webpack:///./src/components/title/index.js","webpack:///./src/components/aframe-grid/index.js","webpack:///./src/basefunctions.js","webpack:///./src/components/aframe-gridxz/index.js","webpack:///./src/components/aframe-gridyz/index.js","webpack:///./src/components/barchart3d/index.js","webpack:///./src/components/barchart/index.js","webpack:///./src/components/barchartstack/index.js","webpack:///./src/components/bubblechart/index.js","webpack:///./src/components/panel/index.js","webpack:///./src/components/piechart/index.js","webpack:///./src/components/smoothcurvechart/index.js","webpack:///./src/index.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8BAA8B;AAChD,gBAAgB,6BAA6B;AAC7C,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB;AACxB,yCAAyC,kDAAkD;AAC3F;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uBAAuB,EAAE;;AAEzB;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;ACjED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,gBAAgB,aAAa;AAC7B,iBAAiB,aAAa;AAC9B,iBAAiB;AACjB,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,EAAE;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;;;AAGA;;;AAGA,qBAAqB,qBAAqB;AAC1C;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;AC9GD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,4BAA4B;AAC5B;AACA;AACA,6CAA6C,kDAAkD;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,oEAAoE;AAC/G,8CAA8C,wDAAwD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yB;;;;;;ACtHA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,EAAE;;AAEvB;AACA;AACA;AACA;AACA,8BAA8B,EAAE;;AAEhC;AACA;AACA;AACA;AACA,uBAAuB,EAAE;;AAEzB;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;AClDD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,EAAE;;AAEvB;AACA;AACA;AACA;AACA,8BAA8B,EAAE;;AAEhC;AACA;AACA;AACA;AACA,uBAAuB,EAAE;;AAEzB;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;AClDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,iBAAiB,aAAa;AAC9B,iBAAiB,aAAa;AAC9B,iBAAiB,aAAa;AAC9B,gBAAgB,cAAc;AAC9B,iBAAiB,cAAc;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB,qBAAqB;AACrC,gBAAgB;AAChB,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA,4BAA4B,sBAAsB;AAClD;;AAEA;AACA;AACA;AACA,mEAAmE,oCAAoC;AACvG,iEAAiE,oCAAoC;AACrG;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,+BAA+B,+CAA+C;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6CAA6C,kCAAkC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8CAA8C,oDAAoD;AAClG;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,8BAA8B,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8CAA8C,oDAAoD;AAClG;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA,2BAA2B,EAAE;;AAE7B;AACA;AACA;AACA;AACA,wBAAwB,EAAE;;AAE1B;AACA;AACA;AACA;AACA,uBAAuB;AACvB,CAAC;;;;;;;ACvUD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,iBAAiB,aAAa;AAC9B,iBAAiB,aAAa;AAC9B,gBAAgB,cAAc;AAC9B,iBAAiB,cAAc;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB,qBAAqB;AACrC,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,uEAAuE;AAClG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6CAA6C,sCAAsC;AACnF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8CAA8C,oDAAoD;AAClG;AACA,4BAA4B;AAC5B,qD;AACA;AACA,S;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC,E;;;;;;ACnOD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,iBAAiB,aAAa;AAC9B,iBAAiB,aAAa;AAC9B,gBAAgB,cAAc;AAC9B,iBAAiB,cAAc;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB,qBAAqB;AACrC,gBAAgB;AAChB,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,0BAA0B,yBAAyB;AACnD;AACA;;AAEA;AACA;AACA,iEAAiE,uCAAuC;AACxG,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,6BAA6B,2DAA2D;AACxF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,2CAA2C,sCAAsC;AACjF;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4CAA4C,oDAAoD;AAChG;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD,+DAA+D,yCAAyC;AACxG;AACA;AACA;AACA;AACA;AACA,6CAA6C,0BAA0B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4CAA4C,oDAAoD;AAChG;AACA,0CAA0C,+CAA+C;AACzF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;AC5SD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,iBAAiB,aAAa;AAC9B,iBAAiB,aAAa;AAC9B,iBAAiB,cAAc;AAC/B,gBAAgB,cAAc;AAC9B,iBAAiB,cAAc;AAC/B,gBAAgB,cAAc;AAC9B,gBAAgB,qBAAqB;AACrC,gBAAgB;AAChB,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,iCAAiC,2DAA2D;AAC5F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA,+CAA+C,qBAAqB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,2CAA2C,kCAAkC;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4CAA4C,oDAAoD;AAChG;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4CAA4C,oDAAoD;AAChG;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;ACrVD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,gBAAgB,aAAa;AAC7B,iBAAiB,aAAa;AAC9B,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wFAAwF,QAAQ;AAChG;AACA;AACA,KAAK;AACL;AACA,gFAAgF,QAAQ;AACxF;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,4CAA4C,iDAAiD;AAC7F;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA,2BAA2B,wBAAwB;AACnD,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;;AAE/C,kCAAkC;AAClC;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+CAA+C,iEAAiE;AAChH,kDAAkD,0DAA0D;AAC5G;AACA;AACA;AACA;AACA,2CAA2C,iEAAiE;AAC5G,8CAA8C,0DAA0D;AACxG;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,8DAA8D;AAC9D;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC,G;;;;;;ACrMD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB,kBAAkB;AAClC,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB,EAAE;AACnE;AACA,sDAAsD,sBAAsB,EAAE;;;AAG9E,uBAAuB,uBAAuB;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,gCAAgC;AAClG;AACA;AACA,2CAA2C,qBAAqB;AAChE,sCAAsC,iCAAiC;AACvE,yCAAyC,mCAAmC;AAC5E,yCAAyC,qBAAqB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,qEAAqE;AAChG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,2CAA2C,gEAAgE;AAC3G,8CAA8C,6EAA6E;AAC3H;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;AC/KD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC,iBAAiB,aAAa;AAC9B,iBAAiB,aAAa;AAC9B,gBAAgB,cAAc;AAC9B,iBAAiB,cAAc;AAC/B,gBAAgB,eAAe;AAC/B,gBAAgB;AAChB,KAAK;AACL;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,+CAA+C,gBAAgB,EAAE;;AAEjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;;AAGA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0DAA0D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,yBAAyB,6CAA6C;AACtE;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,2CAA2C,sCAAsC;AACjF;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4CAA4C,oDAAoD;AAChG;AACA,0BAA0B;AAC1B,mD;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA,sBAAsB,EAAE;;AAExB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,CAAC;;;;;;;ACzND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8CAA8C;AAC9C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,+CAA+C;AAC/C,+CAA+C;AAC/C;AACA,uDAAuD,0CAA0C;AACjG;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4B","file":"aframedc.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fe3e26e3a2c6f7575629","/* global AFRAME */\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\n/**\r\n * Title component for A-Frame.\r\n */\r\nAFRAME.registerComponent('title', {\r\n    schema: {\r\n        caption: { default: \"\", type: \"string\" },\r\n        width: { default: 7, type: \"number\" },\r\n    },\r\n\r\n  /**\r\n   * Set if component needs multiple instancing.\r\n   */\r\n  multiple: false,\r\n\r\n  /**\r\n   * Called when component is attached and when component data changes.\r\n   * Generally modifies the entity based on the data.\r\n   */\r\n  update: function (oldData) {\r\n      var data = this.data;\r\n      var texto;\r\n\r\n      texto = this.el;\r\n\r\n      var TEXT_WIDTH = data.width;\r\n      texto.setAttribute(\"text\", {\r\n          color: \"#000000\",\r\n          side: \"double\",\r\n          value: data.caption,\r\n          align: \"center\",\r\n          width: TEXT_WIDTH,\r\n          wrapCount: 30\r\n      });\r\n      //var labelpos = { x: 0, y:  1, z: 0 };\r\n      ////texto.setAttribute('geometry',{primitive: 'plane', width: 'auto', height: 'auto'});\r\n      //texto.setAttribute('position', labelpos);\r\n  },\r\n  /**\r\n   * Called when a component is removed (e.g., via removeAttribute).\r\n   * Generally undoes all modifications to the entity.\r\n   */\r\n  remove: function () { },\r\n\r\n  /**\r\n   * Called on each scene tick.\r\n   */\r\n  // tick: function (t) { },\r\n\r\n  /**\r\n   * Called when entity pauses.\r\n   * Use to stop or remove any dynamic or background behavior such as events.\r\n   */\r\n  pause: function () { },\r\n\r\n  /**\r\n   * Called when entity resumes.\r\n   * Use to continue or add any dynamic or background behavior such as events.\r\n   */\r\n  play: function () { }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/title/index.js\n// module id = 0\n// module chunks = 0","/* global AFRAME */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Aframe Grid component for A-Frame.\n */\nAFRAME.registerComponent('aframe-grid', {\n    schema: {\r\n        height: { default: 1 },\r\n        width: { default: 1 },\r\n        ysteps: { default: 4 },\r\n        xsteps: { default: 4 }\r\n    },\n\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () { },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function (oldData) {\r\n      var data = this.data;\r\n      var material = new THREE.LineBasicMaterial({\r\n          color: 0x000000,\r\n          linewidth: 1\r\n      });\r\n\r\n      var stepY = data.height / data.ysteps;\r\n\r\n      var grids = new THREE.Object3D();\r\n      for (var i = 0; i < data.ysteps + 1; i++) {\r\n          grids.add(putYGrid(i * stepY));\r\n      };\r\n\r\n\r\n      var stepX = data.width / data.xsteps;\r\n\r\n\r\n      for (var i = 0; i < data.xsteps + 1; i++) {\r\n          grids.add(putXGrid(i * stepX));\r\n      };\r\n\r\n\r\n      function putXGrid(step) {\r\n\r\n          var verticalGeometry = new THREE.Geometry();\r\n\r\n          verticalGeometry.vertices.push(\r\n              new THREE.Vector3(0, -0.2, 0),\r\n              new THREE.Vector3(0, data.height, 0)\r\n          );\r\n          var verticalLine = new THREE.Line(verticalGeometry, material);\r\n\r\n          verticalLine.position.set(step, 0, 0);\r\n          return verticalLine;\r\n\r\n      };\r\n\r\n      function putYGrid(step) {\r\n\r\n          var horizontalGeometry = new THREE.Geometry();\r\n\r\n          horizontalGeometry.vertices.push(\r\n              new THREE.Vector3(-0.2, 0, 0),\r\n              new THREE.Vector3(data.width, 0, 0)\r\n          );\r\n          var horizontalLine = new THREE.Line(horizontalGeometry, material);\r\n\r\n          horizontalLine.position.set(0, step, 0);\r\n          return horizontalLine;\r\n\r\n      };\r\n      this.el.setObject3D('group', grids);\r\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () {\r\n      this.el.removeObject3D('group');\r\n  },\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/aframe-grid/index.js\n// module id = 1\n// module chunks = 0","﻿function utils() {\r\n    var onDataLoaded = function (evt) {\r\n        console.log(this.name + \": Data Loaded!\");\r\n        this.reload = true;\r\n        evt.target.components[this.name].update(this.data);\r\n    };\r\n    var default_init = function (evt) {\r\n        var cName = this.name;\r\n        var that = this;\r\n        this.loaded = false;\r\n        //called at render. take care\r\n        this.el.addEventListener('data-loaded', this.onDataLoaded.bind(this))\r\n    };\r\n\r\n    var default_update = function (oldData) {\r\n        if ((this.el._data && this.el._data.length > 0) || this.el._group) {\r\n            if (this.reload) {\r\n                //rebuild the chart.\r\n                while (this.el.firstChild) {\r\n                    this.el.firstChild.parentNode.removeChild(this.el.firstChild);\r\n                }\r\n                //this.el.innerHTML = \"\";\r\n                this.initChart();\r\n                this.reload = false;\r\n                this.el.setAttribute('visible', true);\r\n            } else {\r\n                //updating single elements. \r\n                var diff = AFRAME.utils.diff(oldData, this.data);\r\n                if (diff.title !== \"\") {\r\n                    var titleEntity = this.el.querySelector(\"[title]\");\r\n                    if (titleEntity) {\r\n                        titleEntity.setAttribute(\"title\", \"caption\", diff.title);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    var addEvents = function () {\r\n        var addEvent = function (basicChart, partElement) {\r\n            partElement.addEventListener('mouseenter', partEventsEnter.bind(basicChart, partElement));\r\n            partElement.addEventListener('mouseleave', partEventsLeave.bind(basicChart, partElement));\r\n        };\r\n        var partEventsEnter = function (el) {\r\n            showInfo(this, el);\r\n            changeMeshColor(el);\r\n        }\r\n        var partEventsLeave = function (el) {\r\n            returnMeshColor(el);\r\n            detachInfo(el);\r\n        };\r\n        var returnMeshColor = function (el) {\r\n            var partelement = el;\r\n            //modo THREEDC\r\n            //var meshEl = partelement.DOMElement.getObject3D('mesh');\r\n            //meshEl.material.emissive.setHex(partelement.currentHex);\r\n            //partelement.DOMElement.setObject3D('mesh', meshEl);\r\n            partelement.setAttribute('color', el._partData.origin_color);\r\n        };\r\n        var detachInfo = function (el) {\r\n            var chartelement = el.parentElement;\r\n            var texttodelete = chartelement.querySelector(\"#tooltip\");\r\n            if (texttodelete) {\r\n                chartelement.removeChild(texttodelete);\r\n            }\r\n        };\r\n        var showInfo = function (basicChart, el) {\r\n            var texto;\r\n            texto = document.createElement(\"a-entity\");\r\n            var dark = 0x0A0A0A * 0x02;\r\n            var darkercolor = Number.parseInt(el._partData.origin_color.replace(\"#\", \"0x\")) - (0xA0A0A * 0x02);\r\n            darkercolor = \"#\" + (\"000000\" + darkercolor.toString(16)).slice(-6)\r\n            var TEXT_WIDTH = 6;\r\n            texto.setAttribute(\"text\", {\r\n                color: \"#000000\",\r\n                side: \"double\",\r\n                value: basicChart._tooltip ? basicChart._tooltip(el.data) : el._partData.name,\r\n                width: TEXT_WIDTH,\r\n                wrapCount: 30\r\n            });\r\n\r\n            var labelpos = { x: el._partData.position.x + TEXT_WIDTH / 2, y: el._partData.position.y, z: el._partData.position.z };\r\n            texto.id = \"tooltip\";\r\n            texto.setAttribute('position', labelpos);\r\n            //texto.setAttribute('geometry',{primitive: 'plane', width: 'auto', height: 'auto'});\r\n            //basicChart.getEscene().appendChild(texto);\r\n            el.parentElement.appendChild(texto);\r\n        }\r\n        var changeMeshColor = function (el) {\r\n            var partelement = el;\r\n            var originColor = partelement.getObject3D('mesh').material.color.getHex();\r\n            //modo THREEDC\r\n            //partelement.currentHex = meshEl.material.emissive.getHex();\r\n            //meshEl.material.emissive.setHex(threeCol.getHex());\r\n            //partelement.DOMElement.setObject3D('mesh', meshEl);\r\n            var myColor = 0xFFFFFF ^ originColor;\r\n            partelement.setAttribute('color', \"#\" + (\"000000\" + myColor.toString(16)).slice(-6));\r\n        }\r\n        //events by default\r\n        for (var i = 0; i < this.el.children.length; i++) {\r\n            addEvent(this.el, this.el.children[i]);\r\n        };\r\n\r\n    };\r\n    var addTitle = function () {\r\n        var titleEntity = document.createElement(\"a-entity\");\r\n        titleEntity.setAttribute(\"title\", { caption: this.data.title, width: Math.max(this.data.width / 2, 6) });\r\n        titleEntity.setAttribute(\"position\", { x: this.data.width / 2, y: this.data.height + 1, z: 0 });\r\n        this.el.appendChild(titleEntity);\r\n    };\r\n    return {\r\n        onDataLoaded: onDataLoaded,\r\n        default_init: default_init,\r\n        default_update: default_update,\r\n        addEvents: addEvents,\r\n        addTitle: addTitle\r\n    };\r\n};\r\n\r\nmodule.exports = utils();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/basefunctions.js\n// module id = 2\n// module chunks = 0","/* global AFRAME */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Aframe Gridxz component for A-Frame.\n */\nAFRAME.registerComponent('aframe-gridxz', {\n  schema: {},\n\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () { },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function (oldData) { },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/aframe-gridxz/index.js\n// module id = 3\n// module chunks = 0","/* global AFRAME */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Aframe Gridyz component for A-Frame.\n */\nAFRAME.registerComponent('aframe-gridyz', {\n  schema: {},\n\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () { },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function (oldData) { },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/aframe-gridyz/index.js\n// module id = 4\n// module chunks = 0","/* global AFRAME */\nrequire(\"../aframe-grid/index.js\")\nrequire(\"../aframe-gridxz/index.js\")\nrequire(\"../aframe-gridyz/index.js\")\nrequire(\"../title/index.js\")\nvar utils = require(\"../../basefunctions.js\")\nif (typeof AFRAME === 'undefined') {\r\n    throw new Error('Component attempted to register before AFRAME was available.');\r\n}\n\n/**\n * Barchart3d component for A-Frame.\n */\nAFRAME.registerComponent('barchart3d', {\r\n    schema: {\r\n        gridson: { default: true },\r\n        xsteps: { default: 5 },\r\n        ysteps: { default: 5 },\r\n        zsteps: { default: 5 },\r\n        width: { default: 10 },\r\n        height: { default: 10 },\r\n        depth: { default: 0.5 },\r\n        color: { default: '#00FF00' },\r\n        title: { default: \"\" }\r\n    },\n    onDataLoaded: utils.onDataLoaded,\n\n    update: utils.default_update,\n    /**\n     * Set if component needs multiple instancing.\n     */\n    multiple: false,\n\n    /**\n     * Called once when component is attached. Generally for initial setup.\n     */\n    init: utils.default_init,\n\n    /**\n     * Called when component is attached and when component data changes.\n     * Generally modifies the entity based on the data.\n     */\n    update: utils.default_update,\n\n    /**\n     * Called when a component is removed (e.g., via removeAttribute).\n     * Generally undoes all modifications to the entity.\n     */\n    initChart: function () {\r\n        var eElem = this.el;\r\n        var componentData = this.data;\r\n        if ((!eElem._data || eElem._data.length === 0) &&\r\n           !eElem._group) return;\r\n        if (!eElem._zAxis) return;\r\n        var __calculateY = function (initialY, height) {\r\n            var returnedY = height / 2 + initialY;\r\n            return returnedY;\r\n        };\r\n\r\n\r\n        var _data;\r\n        if (eElem._data && eElem._data.length > 0) {\r\n            _data = eElem._data;\r\n        } else if (eElem._group) {\r\n            _data = eElem._group.all();\r\n        }\r\n\r\n        BAR_WIDTH = componentData.width / _data.length;;\r\n        BAR_DEPTH = componentData.depth / eElem._zAxis.length;\r\n        MAX_HEIGHT = componentData.height;\r\n        //using value and height accessor to retrieve max's\r\n        var arrays = _data.map(function (p) {\r\n            var myp = p;\r\n            return eElem._arrAccesor(p).map(function (o) {\r\n                return eElem._heightAccesor(o, myp);\r\n            });\r\n        });\r\n        var MAX_VALUE = Math.max.apply(null, ([].concat.apply([], arrays)));\r\n        var entityEl = document.createElement('a-entity');\r\n        var yMaxPoint = 0;\r\n\r\n        var relativeX, relativeY;\r\n        relativeX = BAR_WIDTH / 2;\r\n        relativeY = 0;\r\n\r\n        for (var i = 0; i < _data.length; i++) {\r\n            var dataValue = _data[i].value;\r\n            for (var j = 0 ; j < dataValue.length; j++) {\r\n                //we need to scale every item.\r\n\r\n                var myHeight = (eElem._heightAccesor(dataValue[j], dataValue) / MAX_VALUE) * MAX_HEIGHT;\r\n                var myYPosition = __calculateY(relativeY, myHeight);\r\n                var el = document.createElement('a-box');\r\n                var actualColor = eElem._colors.find(function (a) { return a.key === dataValue[j].key }).value;\r\n                var index = eElem._zAxis.findIndex(function (a) { return a.key === dataValue[j].key });\r\n                //-bardepth *i - bardepth/2\r\n                var zpos = -(BAR_DEPTH) * (index + 0.5);\r\n                var elPos = { x: relativeX, y: myYPosition, z: zpos };\r\n\r\n                el.setAttribute('width', BAR_WIDTH);\r\n                el.setAttribute('height', myHeight);\r\n                el.setAttribute('depth', BAR_DEPTH);\r\n                el.setAttribute('color', actualColor);\r\n                el.setAttribute('position', elPos);\r\n\r\n\r\n                var valuePart = _data[i].value;\r\n                if (eElem._valueHandler)\r\n                    valuePart = eElem._valueHandler(dataValue[j], dataValue);\r\n                var keyPart = _data[i].key;\r\n                if (eElem._keyHandler) {\r\n                    keyPart = eElem._keyHandler(_data[i]);\r\n                }\r\n                //storing parts info..\r\n                var barPart = {\r\n                    name: \"key:\" + keyPart + \" value:\" + valuePart,\r\n                    data: {\r\n                        key: _data[i].key,\r\n                        value: _data[i].value\r\n                    },\r\n                    position: { x: elPos.x, y: MAX_HEIGHT + 0.25, z: elPos.z },\r\n                    origin_color: actualColor\r\n                };\r\n                el._partData = barPart;\r\n                //getting max.\r\n                eElem.appendChild(el);\r\n                var myFunc = function (chart, element) {\r\n\r\n                    if (chart.el._dimension) {\r\n                        var myDim = chart.el._dimension;\r\n                        myDim.filterAll(null);\r\n                        myDim = myDim.filter(element.data.key);\r\n                        //llamada a redibujado de todo..\r\n                        var dashboard;\r\n                        if (chart.el._dashboard)\r\n                            dashboard = chart.el._dashboard;\r\n                        else if (chart.el._panel)\r\n                            dashboard = chart.el._panel._dashboard;\r\n\r\n                        if (dashboard) {\r\n                            //getting all charts\r\n                            var charts = dashboard.allCharts();\r\n                            for (var ch = 0 ; ch < charts.length; ch++) {\r\n                                if (charts[ch] !== chart.el && charts[ch]._group) {\r\n                                    charts[ch].emit(\"data-loaded\");\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            var childs = chart.el.parentElement.children;\r\n                            for (var ch = 0 ; ch < childs.length ; ch++) {\r\n                                if (childs[ch] !== chart.el && childs[ch]._group) {\r\n                                    childs[ch].emit(\"data-loaded\");\r\n                                }\r\n                            }\r\n                        }\r\n                        //exp.\r\n                        chart.el.emit(\"filtered\", { element: element });\r\n                    }\r\n                };\r\n                var myBindFunc = myFunc.bind(null, this, el._partData);\r\n                el.addEventListener(\"click\", myBindFunc);\r\n            }\r\n            relativeX += BAR_WIDTH;\r\n\r\n        }\r\n        this.addEvents();\r\n\r\n        var entLabels = this.addYLabels();\r\n        for (var lb = 0 ; lb < entLabels.length; lb++) {\r\n            eElem.appendChild(entLabels[lb]);\r\n        }\r\n        var zlabels = this.addZLabels();\r\n        for (var lb = 0 ; lb < zlabels.length; lb++) {\r\n            eElem.appendChild(zlabels[lb]);\r\n        }\r\n        if (componentData.gridson) {\r\n            this.addGrid();\r\n        }\r\n        if (componentData.title !== \"\") {\r\n            this.addTitle();\r\n        }\r\n    },\r\n    addGrid: function () {\r\n        var gridEntity = document.createElement('a-entity');\r\n        gridEntity.setAttribute('aframe-grid', {\r\n            height: this.data.height,\r\n            width: this.data.width,\r\n            ysteps: this.data.ysteps,\r\n            xsteps: this.data.xsteps\r\n        });\r\n        gridEntity.setAttribute(\"position\", { x: 0, y: 0, z: -this.data.depth });\r\n        this.el.appendChild(gridEntity);\r\n\r\n        var gridEntityZY = document.createElement('a-entity');\r\n        gridEntityZY.setAttribute('aframe-gridyz', {\r\n            height: this.data.height,\r\n            depth: this.data.depth,\r\n            ysteps: this.data.ysteps,\r\n            zsteps: this.el._zAxis.length\r\n        });\r\n\r\n\r\n        var gridEntityXZ = document.createElement('a-entity');\r\n        gridEntityXZ.setAttribute('aframe-gridxz', {\r\n            width: this.data.width,\r\n            depth: this.data.depth,\r\n            xsteps: this.data.xsteps,\r\n            zsteps: this.el._zAxis.length\r\n        });\r\n        this.el.appendChild(gridEntityZY);\r\n        this.el.appendChild(gridEntityXZ);\r\n    },\n    addTitle: utils.addTitle,\n    addEvents: utils.addEvents,\r\n    addYLabels: function () {\r\n        var numberOfValues;\r\n        var topYValue;\r\n        var getYLabel = function (component, step, value) {\r\n\r\n            var txt = value;\r\n            var curveSeg = 3;\r\n            var texto = document.createElement(\"a-entity\");\r\n            TEXT_WIDTH = 6;\r\n            //FIXME: depende del tama�o de letra...\r\n            var xPos = -0.7;\r\n            //var yPos = BasicChart._coords.y + step +  0.36778332145402703 / 2;\r\n            var yPos = step;\r\n            texto.setAttribute(\"text\", {\r\n                color: \"#000000\",\r\n                side: \"double\",\r\n                value: value.toFixed(2),\r\n                width: TEXT_WIDTH,\r\n                wrapCount: 30,\r\n                align: \"center\"\r\n            });\r\n            //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\r\n            // Positions the text and adds it to the THREEDC.scene\r\n            var labelpos = { x: xPos, y: yPos, z: -component.data.depth };\r\n            texto.setAttribute('position', labelpos);\r\n            return texto;\r\n        }\r\n        var _data;\r\n        var eElem = this.el;\r\n        if (this.el._data) {\r\n            _data = this.el._data;\r\n        } else {\r\n            _data = this.el._group.top(Infinity);\r\n        }\r\n        //using value and height accessor to retrieve max's\r\n        var arrays = _data.map(function (p) {\r\n            var myp = p;\r\n            return eElem._arrAccesor(p).map(function (o) {\r\n                return eElem._heightAccesor(o, myp);\r\n            });\r\n        });\r\n        topYValue = Math.max.apply(null, ([].concat.apply([], arrays)));\r\n        numberOfValues = _data.length;\r\n        //Y AXIS\r\n        //var numerOfYLabels=Math.round(_chart._height/20);\r\n        var stepYValue = topYValue / this.data.ysteps;\r\n        var stepY = this.data.height / this.data.ysteps;\r\n        var labels = [];\r\n        for (var i = 0; i < this.data.ysteps + 1; i++) {\r\n            labels.push(getYLabel(this, i * stepY, i * stepYValue));\r\n        };\r\n\r\n        return labels;\r\n    },\r\n    addZLabels: function () {\r\n        if (!this.el._zAxis) return;\r\n        var getZLabel = function (component, step, labelkv) {\r\n            var curveSeg = 3;\r\n            var texto = document.createElement(\"a-entity\");\r\n            TEXT_WIDTH = 6;\r\n            //FIXME: depende del tama�o de letra...\r\n            var xPos = -1 * ((TEXT_WIDTH / 2) + 0.7);\r\n            var zPos = -step;\r\n            var actualColor = component.el._colors.find(function (d) { return d.key === labelkv.key; }).value;\r\n            texto.setAttribute(\"text\", {\r\n                color: actualColor,\r\n                side: \"double\",\r\n                value: labelkv.key,\r\n                width: TEXT_WIDTH,\r\n                wrapCount: 30,\r\n                align: \"right\"\r\n            });\r\n            //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\r\n            // Positions the text and adds it to the THREEDC.scene\r\n            var labelpos = { x: xPos, y: 0, z: zPos };\r\n            texto.setAttribute('position', labelpos);\r\n            return texto;\r\n        }\r\n\r\n        var stepZ = this.data.depth / this.el._zAxis.length;\r\n        var labels = [];\r\n        for (var i = 0; i < this.el._zAxis.length; i++) {\r\n            labels.push(getZLabel(this, i * stepZ + stepZ / 2, this.el._zAxis[i]));\r\n        };\r\n\r\n        return labels;\r\n    },\r\n    remove: function () {\r\n        while (this.el.firstChild) {\r\n            this.el.removeChild(this.el.firstChild);\r\n        }\r\n        this.el.innerHTML = \"\";\r\n        this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\r\n\r\n    },\n\n    /**\n     * Called on each scene tick.\n     */\n    // tick: function (t) { },\n\n    /**\n     * Called when entity pauses.\n     * Use to stop or remove any dynamic or background behavior such as events.\n     */\n    pause: function () { },\n\n    /**\n     * Called when entity resumes.\n     * Use to continue or add any dynamic or background behavior such as events.\n     */\n    play: function () { }\r\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/barchart3d/index.js\n// module id = 5\n// module chunks = 0","require(\"../aframe-grid/index.js\")\nrequire(\"../title/index.js\")\nvar utils = require(\"../../basefunctions.js\")\n/* global AFRAME */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Barchart component for A-Frame.\n */     \nAFRAME.registerComponent('barchart', {\n    schema: {\n        gridson: { default: true },\n        xsteps: { default: 5 },\n        ysteps: { default: 5 },\n        width: { default: 10 },\n        height: { default: 10 },\n        depth: { default: 0.5 },\n        color: { default: '#00FF00' },\n        title: {default: \"\"}\n    },\n    onDataLoaded: utils.onDataLoaded,\n    init: utils.default_init,\n    update: utils.default_update,\n    initChart: function () {\n        var eElem = this.el;\n        var componentData = this.data;\n        if ((!eElem._data || eElem._data.length === 0) &&\n           !eElem._group) return;\n        var __calculateY = function (initialY, height) {\n            var returnedY = height / 2 + initialY;\n            return returnedY;\n        };\n        var scale = function () {\n            var max;\n            var p = [];\n            max = Math.max.apply(null, arguments);\n            for (var i = 0 ; i < arguments.length; i++) {\n                p.push((arguments[i] / max));\n            }\n            return p;\n        };\n\n        var _data;\n        if (eElem._data && eElem._data.length > 0) {\n            _data = eElem._data;\n        } else if (eElem._group) {\n            _data = eElem._group.all();\n        }\n        var dataValues = _data.map(function (a) {\n            if (eElem._valueHandler) {\n                return eElem._valueHandler(a);\n            }\n            return a.value;\n        });;\n        dataValues = scale.apply(null, dataValues);\n        BAR_WIDTH = componentData.width / dataValues.length;;\n        BAR_DEPTH = componentData.depth;\n        MAX_HEIGHT = componentData.height;\n        COLORS = ['#2338D9', '#23A2D9', '#23D978', '#BAD923', '#D923D3'];\n        var entityEl = document.createElement('a-entity');\n        var yMaxPoint = 0;\n\n        var relativeX, relativeY, relativeZ;\n        relativeX = BAR_WIDTH / 2;\n        relativeY = 0;\n        relativeZ = componentData.depth / 2;\n\n        for (var i = 0; i < dataValues.length; i++) {\n            var myHeight = dataValues[i] * MAX_HEIGHT;\n            var myYPosition = __calculateY(relativeY, myHeight);\n            var el = document.createElement('a-box');\n            var actualColor = componentData.color || COLORS[i % COLORS.length];\n            var elPos = { x: relativeX, y: myYPosition, z: 0 };\n\n            el.setAttribute('width', BAR_WIDTH);\n            el.setAttribute('height', myHeight);\n            el.setAttribute('depth', BAR_DEPTH);\n            el.setAttribute('color', actualColor);\n            el.setAttribute('position', elPos);\n            relativeX += BAR_WIDTH;\n\n            var valuePart = _data[i].value;\n            if(eElem._valueHandler)\n                valuePart = eElem._valueHandler(_data[i]);\n            var keyPart = _data[i].key;\n            if (eElem._keyHandler) {\n                keyPart = eElem._keyHandler(_data[i]);\n            }\n            //storing parts info..\n            var barPart = {\n                name: \"key:\" + keyPart + \" value:\" + valuePart,\n                data: {\n                    key: _data[i].key,\n                    value: valuePart\n                },\n                position: { x: elPos.x, y: relativeY + MAX_HEIGHT + 0.25, z: elPos.z + relativeZ },\n                origin_color: actualColor\n            };\n            el._partData = barPart;\n            //getting max.\n            eElem.appendChild(el);\n            var myFunc = function (chart, element) {\n\n                if (chart.el._dimension) {\n                    var myDim = chart.el._dimension;\n                    myDim.filterAll(null);\n                    myDim = myDim.filter(element.data.key);\n                    //llamada a redibujado de todo..\n                    var dashboard;\n                    if (chart.el._dashboard)\n                        dashboard = chart.el._dashboard;\n                    else if (chart.el._panel)\n                        dashboard = chart.el._panel._dashboard;\n\n                    if (dashboard) {\n                        //getting all charts\n                        var charts = dashboard.allCharts();\n                        for (var ch = 0 ; ch < charts.length; ch++) {\n                            if (charts[ch] !== chart.el && charts[ch]._group) {\n                                charts[ch].emit(\"data-loaded\");\n                            }\n                        }\n\n                    } else {\n                        var childs = chart.el.parentElement.children;\n                        for (var ch = 0 ; ch < childs.length ; ch++) {\n                            if (childs[ch] !== chart.el && childs[ch]._group) {\n                                childs[ch].emit(\"data-loaded\");\n                            }\n                        }\n                    }\n                    //exp.\n                    chart.el.emit(\"filtered\", { element: element });\n                }\n            };\n            var myBindFunc = myFunc.bind(null, this, el._partData);\n            el.addEventListener(\"click\", myBindFunc);\n        }\n        this.addEvents();\n        var entLabels = this.addYLabels();\n        for (var lb = 0 ; lb < entLabels.length; lb++) {\n            eElem.appendChild(entLabels[lb]);\n        }\n        if (componentData.gridson) {\n            this.addGrid();\n        }\n        if (componentData.title !== \"\") {\n            this.addTitle();\n        }\n    },\n    addGrid: function (entityEl) {\n        var gridEntity = document.createElement('a-entity');\n        gridEntity.setAttribute('aframe-grid', {\n            height: this.data.height,\n            width: this.data.width,\n            ysteps: this.data.ysteps,\n            xsteps: this.data.xsteps\n        });\n        gridEntity.setAttribute(\"position\", { x: 0, y: 0, z: -this.data.depth / 2 });\n        this.el.appendChild(gridEntity);\n    },\n    addTitle: utils.addTitle,\n    addEvents: utils.addEvents,\n    addYLabels : function () {\n        var numberOfValues;\n        var topYValue;\n        var getYLabel = function(component, step, value) {\n\n            var txt = value;\n            var curveSeg = 3;\n            var texto = document.createElement(\"a-entity\");\n            TEXT_WIDTH = 6;\n            //FIXME: depende del tamaño de letra...\n            var xPos =     -0.7;\n            //var yPos = BasicChart._coords.y + step +  0.36778332145402703 / 2;\n            var yPos =   step;\n            texto.setAttribute(\"text\", {\n                color: \"#000000\",\n                side: \"double\",\n                value: value.toFixed(2),\n                width: TEXT_WIDTH,\n                wrapCount: 30,\n                align: \"center\"\n            });\n            //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\n            // Positions the text and adds it to the THREEDC.scene\n            var labelpos = { x: xPos, y: yPos, z: -component.data.depth / 2 };\n            texto.setAttribute('position', labelpos); \n            return texto;\n        } \n        var _data;\n        var eElem = this.el;\n        if (this.el._data) {\n            _data = this.el._data;\n        } else {\n            _data = this.el._group.top(Infinity);\n        }\n        var dataValues = _data.map(function (a) {\n            if (eElem._valueHandler) {\n                return eElem._valueHandler(a);\n            }\n            return a.value;\n        });;\n        topYValue = Math.max.apply(null, dataValues);\n        numberOfValues = dataValues.length;\n        //Y AXIS\n        //var numerOfYLabels=Math.round(_chart._height/20);\n        var stepYValue= topYValue/this.data.ysteps;\n        var stepY=this.data.height/this.data.ysteps;\n        var labels = [];\n        for (var i = 0; i <this.data.ysteps +1; i++) {\n            labels.push(getYLabel(this, i * stepY, i * stepYValue));\n        };\n        \n        return labels;\n    },\n    remove: function () {\n        while (this.el.firstChild) {\n            this.el.removeChild(this.el.firstChild);\n        }\n        this.el.innerHTML = \"\";\n        this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\n\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/barchart/index.js\n// module id = 6\n// module chunks = 0","/* global AFRAME */\nrequire(\"../aframe-grid/index.js\")\nrequire(\"../title/index.js\")\nvar utils = require(\"../../basefunctions.js\")\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Barchartstack component for A-Frame.\n */\nAFRAME.registerComponent('barchartstack', {\n    schema: {\r\n        gridson: { default: true },\r\n        xsteps: { default: 5 },\r\n        ysteps: { default: 5 },\r\n        width: { default: 10 },\r\n        height: { default: 10 },\r\n        depth: { default: 0.5 },\r\n        color: { default: '#00FF00' },\r\n        title: { default: \"\" }\r\n    },\n\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n  onDataLoaded: utils.onDataLoaded,\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n\n  init: utils.default_init,\n\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: utils.default_update,\n  initChart: function () {\r\n      var eElem = this.el;\r\n      var componentData = this.data;\r\n      if ((!eElem._data || eElem._data.length === 0) &&\r\n         !eElem._group) return;\r\n      var __calculateY = function (initialY, height) {\r\n          var returnedY = height / 2 + initialY;\r\n          return returnedY;\r\n      };\r\n\r\n\r\n      var _data;\r\n      if (eElem._data && eElem._data.length > 0) {\r\n          _data = eElem._data;\r\n      } else if (eElem._group) {\r\n          _data = eElem._group.all();\r\n      }\r\n\r\n      BAR_WIDTH = componentData.width / _data.length;;\r\n      BAR_DEPTH = componentData.depth;\r\n      MAX_HEIGHT = componentData.height;\r\n      MAX_VALUE = eElem._maxfunc(eElem._group.order(eElem._maxfunc).top(1)[0].value);\r\n      var entityEl = document.createElement('a-entity');\r\n      var yMaxPoint = 0;\r\n\r\n      var relativeX, relativeY, relativeZ;\r\n      relativeX = BAR_WIDTH / 2;\r\n      relativeY = 0;\r\n      relativeZ = componentData.depth / 2;\r\n\r\n      for (var i = 0; i < _data.length; i++) {\r\n          var sortedValues = _data[i].value.slice();\r\n          sortedValues.sort(function (a, b) {\r\n              if (a.value < b.value) {\r\n                  return 1;\r\n              }\r\n              if (a.value > b.value) {\r\n                  return -1;\r\n              }\r\n              // a must be equal to b\r\n              return 0;\r\n          });\r\n          for (var j = 0 ; j < sortedValues.length; j++) {\r\n              //we need to scale every item.\r\n              var myHeight = (sortedValues[j].value / MAX_VALUE) * MAX_HEIGHT;\r\n\r\n              var myYPosition = __calculateY(relativeY, myHeight);\r\n              var el = document.createElement('a-box');\r\n              var actualColor = eElem._colors.find(function (a) { return a.key === sortedValues[j].key }).value;\r\n              var elPos = { x: relativeX, y: myYPosition, z: 0 };\r\n\r\n              el.setAttribute('width', BAR_WIDTH);\r\n              el.setAttribute('height', myHeight);\r\n              el.setAttribute('depth', BAR_DEPTH);\r\n              el.setAttribute('color', actualColor);\r\n              el.setAttribute('position', elPos);\r\n\r\n\r\n              var valuePart = _data[i].value;\r\n              if (eElem._valueHandler)\r\n                  valuePart = eElem._valueHandler(_data[i]);\r\n              var keyPart = _data[i].key;\r\n              if (eElem._keyHandler) {\r\n                  keyPart = eElem._keyHandler(_data[i]);\r\n              }\r\n              //storing parts info..\r\n              var barPart = {\r\n                  name: \"key:\" + keyPart + \" org:\" + sortedValues[j].key + \" value: \" + sortedValues[j].value,\r\n                  data: {\r\n                      key: _data[i].key,\r\n                      value: valuePart\r\n                  },\r\n                  position: { x: elPos.x, y: MAX_HEIGHT + 0.25, z: elPos.z + relativeZ },\r\n                  origin_color: actualColor\r\n              };\r\n              el._partData = barPart;\r\n              //getting max.\r\n              eElem.appendChild(el);\r\n              var myFunc = function (chart, element) {\r\n\r\n                  if (chart.el._dimension) {\r\n                      var myDim = chart.el._dimension;\r\n                      myDim.filterAll(null);\r\n                      myDim = myDim.filter(element.data.key);\r\n                      //llamada a redibujado de todo..\r\n                      var dashboard;\r\n                      if (chart.el._dashboard)\r\n                          dashboard = chart.el._dashboard;\r\n                      else if (chart.el._panel)\r\n                          dashboard = chart.el._panel._dashboard;\r\n\r\n                      if (dashboard) {\r\n                          //getting all charts\r\n                          var charts = dashboard.allCharts();\r\n                          for (var ch = 0 ; ch < charts.length; ch++) {\r\n                              if (charts[ch] !== chart.el && charts[ch]._group) {\r\n                                  charts[ch].emit(\"data-loaded\");\r\n                              }\r\n                          }\r\n\r\n                      } else {\r\n                          var childs = chart.el.parentElement.children;\r\n                          for (var ch = 0 ; ch < childs.length ; ch++) {\r\n                              if (childs[ch] !== chart.el && childs[ch]._group) {\r\n                                  childs[ch].emit(\"data-loaded\");\r\n                              }\r\n                          }\r\n                      }\r\n                      //exp.\r\n                      chart.el.emit(\"filtered\", { element: element });\r\n                  }\r\n              };\r\n              var myBindFunc = myFunc.bind(null, this, el._partData);\r\n              el.addEventListener(\"click\", myBindFunc);\r\n              relativeY = relativeY + myHeight;\r\n          }\r\n          relativeY = 0;\r\n          relativeX += BAR_WIDTH;\r\n\r\n      }\r\n      this.addEvents();\r\n      if (eElem._colors) {\r\n          this.addleyenda();\r\n      }\r\n      var entLabels = this.addYLabels();\r\n      for (var lb = 0 ; lb < entLabels.length; lb++) {\r\n          eElem.appendChild(entLabels[lb]);\r\n      }\r\n      if (componentData.gridson) {\r\n          this.addGrid();\r\n      }\r\n      if (componentData.title !== \"\") {\r\n          this.addTitle();\r\n      }\r\n  },\r\n  addGrid: function (entityEl) {\r\n      var gridEntity = document.createElement('a-entity');\n      gridEntity.setAttribute('aframe-grid', {\r\n          height: this.data.height,\n          width: this.data.width,\n          ysteps: this.data.ysteps,\n          xsteps: this.data.xsteps\r\n      });\n      gridEntity.setAttribute(\"position\", { x: 0, y: 0, z: -this.data.depth / 2 });\n      this.el.appendChild(gridEntity);\r\n  },\n  addTitle: utils.addTitle,\n  addEvents: utils.addEvents,\n  addYLabels: function () {\r\n      var numberOfValues;\r\n      var topYValue;\r\n      var getYLabel = function (component, step, value) {\r\n\r\n          var txt = value;\r\n          var curveSeg = 3;\r\n          var texto = document.createElement(\"a-entity\");\r\n          TEXT_WIDTH = 6;\r\n          //FIXME: depende del tama�o de letra...\r\n          var xPos = -0.7;\r\n          //var yPos = BasicChart._coords.y + step +  0.36778332145402703 / 2;\r\n          var yPos = step;\r\n          texto.setAttribute(\"text\", {\r\n              color: \"#000000\",\r\n              side: \"double\",\r\n              value: value.toFixed(2),\r\n              width: TEXT_WIDTH,\r\n              wrapCount: 30,\r\n              align: \"center\"\r\n          });\r\n          //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\r\n          // Positions the text and adds it to the THREEDC.scene\r\n          var labelpos = { x: xPos, y: yPos, z: -component.data.depth / 2 };\r\n          texto.setAttribute('position', labelpos);\r\n          return texto;\r\n      }\r\n      var _data;\r\n      var eElem = this.el;\r\n      if (this.el._data) {\r\n          _data = this.el._data;\r\n      } else {\r\n          _data = this.el._group.top(Infinity);\r\n      }\r\n\r\n      topYValue = eElem._maxfunc(eElem._group.order(eElem._maxfunc).top(1)[0].value);\r\n      numberOfValues = _data.length;\r\n      //Y AXIS\r\n      //var numerOfYLabels=Math.round(_chart._height/20);\r\n      var stepYValue = topYValue / this.data.ysteps;\r\n      var stepY = this.data.height / this.data.ysteps;\r\n      var labels = [];\r\n      for (var i = 0; i < this.data.ysteps + 1; i++) {\r\n          labels.push(getYLabel(this, i * stepY, i * stepYValue));\r\n      };\r\n\r\n      return labels;\r\n  },\r\n  addleyenda: function () {\r\n      var leyendaEntity = document.createElement(\"a-entity\");\r\n      leyendaEntity.id = \"barchart3dleyend\";\r\n      var topValue= this.el._group.top(1)[0];\r\n      var xPos = this.data.width +0.25 +1;\r\n      var ystep = this.data.height -0.25;\r\n      for (var i = 0; i < topValue.value.length; i++) {\r\n          var actualColor = this.el._colors.find(function (a) { return a.key === topValue.value[i].key }).value;\r\n          var colorbox = document.createElement(\"a-box\");\r\n          colorbox.setAttribute(\"color\", actualColor);\r\n          colorbox.setAttribute(\"width\", 0.5);\r\n          colorbox.setAttribute(\"height\", 0.5);\r\n          colorbox.setAttribute(\"depth\", 0.5);\r\n          colorbox.setAttribute('position', { x: xPos, y: ystep, z: 0 });\r\n          var curveSeg = 3;\r\n          var texto = document.createElement(\"a-entity\");\r\n          TEXT_WIDTH = 6;\r\n          var txt = topValue.value[i].key;\r\n          texto.setAttribute(\"text\", {\r\n              color: \"#000000\",\r\n              side: \"double\",\r\n              value: txt,\r\n              width: TEXT_WIDTH,\r\n              wrapCount: 30,\r\n              align: \"left\"\r\n          });\r\n          //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\r\n          // Positions the text and adds it to the THREEDC.scene\r\n          texto.setAttribute('position', { x: xPos + 1 + TEXT_WIDTH / 2, y: ystep, z: 0 });\r\n          leyendaEntity.appendChild(texto);\r\n          leyendaEntity.appendChild(colorbox);\r\n          ystep -= 0.62;\r\n      }\r\n      this.el.appendChild(leyendaEntity);\r\n  },\r\n  remove: function () {\r\n      while (this.el.firstChild) {\r\n          this.el.removeChild(this.el.firstChild);\r\n      }\r\n      this.el.innerHTML = \"\";\r\n      this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\r\n\r\n  },\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/barchartstack/index.js\n// module id = 7\n// module chunks = 0","/* global AFRAME */\nrequire(\"../aframe-grid/index.js\")\nrequire(\"../aframe-gridxz/index.js\")\nrequire(\"../aframe-gridyz/index.js\")\nrequire(\"../title/index.js\")\nvar utils = require(\"../../basefunctions.js\")\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Bubblechart component for A-Frame.\n */\nAFRAME.registerComponent('bubblechart', {\n    schema: {\r\n        gridson: { default: true },\r\n        xsteps: { default: 5 },\r\n        ysteps: { default: 5 },\r\n        zsteps: { default: 10 },\r\n        width: { default: 10 },\r\n        height: { default: 10 },\r\n        depth: { default: 20 },\r\n        color: { default: '#00FF00' },\r\n        title: { default: \"\" }\r\n    },\n\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  onDataLoaded: utils.onDataLoaded,\n  init: utils.default_init,\n  update: utils.default_update,\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: utils.default_update,\n  initChart: function () {\r\n      var eElem = this.el;\r\n      var componentData = this.data;\r\n      if ((!eElem._data || eElem._data.length === 0) &&\r\n         !eElem._group) return;\r\n      //var __calculateY = function (initialY, height) {\r\n      //    var returnedY = height / 2 + initialY;\r\n      //    return returnedY;\r\n      //};\r\n\r\n\r\n      var _data;\r\n      if (eElem._data && eElem._data.length > 0) {\r\n          _data = eElem._data;\r\n      } else if (eElem._group) {\r\n          _data = eElem._group.all();\r\n      }\r\n      var relativeX, relativeY, relativeZ;\r\n        \r\n        \r\n      var BAR_DEPTH = componentData.depth;\r\n      var MAX_HEIGHT = componentData.height;\r\n      //using value and height accessor to retrieve max's\r\n      var arrays = _data.map(function (p) {\r\n          var myp = p;\r\n          return eElem._arrAccesor(p).map(function (o) {\r\n              return eElem._heightAccesor(o, myp);\r\n          });\r\n      });\r\n      var MAX_VALUE = Math.max.apply(null, ([].concat.apply([], arrays)));\r\n      arrays = _data.map(function (p) {\r\n          var myp = p;\r\n          return eElem._arrAccesor(p).map(function (o) {\r\n              return eElem._radiusAccesor(o, myp);\r\n          });\r\n      });\r\n      var MAX_RADIUS_VALUE = Math.max.apply(null, ([].concat.apply([], arrays)));\r\n      var zAxis = eElem._zAxis;\r\n      if (!zAxis) {\r\n          //calculate axis data.\r\n          //TODO:\r\n      }\r\n      var MAX_RADIUS = Math.min(componentData.width,componentData.height ,componentData.depth)  / Math.min(_data.length, zAxis.length);\r\n      var zStep = (componentData.depth) / zAxis.length;\r\n      var xStep = (componentData.width )/ _data.length;\r\n      relativeX = 0 ;\r\n      relativeY = MAX_RADIUS;\r\n      relativeZ = -MAX_RADIUS/2  ;\r\n      for (var i = 0; i < _data.length; i++) {\r\n          for (var j = 0; j < zAxis.length; j++) {\r\n              var Axiskey = zAxis[j];\r\n              var datavalue = _data[i];\r\n              var findkey = function (k) {\r\n                  if (!k.key) return;\r\n                  return k.key === Axiskey.key;\r\n              }\r\n              var element = eElem._arrAccesor(datavalue).find(findkey);\r\n              if (element) {\r\n                  //drawing element.\r\n                  //we need to scale every item. be careful with this.\r\n                  var ypos = (eElem._heightAccesor(element,datavalue) / MAX_VALUE) * MAX_HEIGHT;\r\n                  var actualColor = Axiskey.value;\r\n                  var radius = (eElem._radiusAccesor(element, datavalue) / MAX_RADIUS_VALUE) * MAX_RADIUS;\r\n                  var elPos = { x: relativeX, y: ypos , z: relativeZ };\r\n                  var el = document.createElement('a-entity');\r\n\r\n                  el.setAttribute(\"mixin\", \"sph transparente\");\r\n                  el.setAttribute(\"geometry\",'radius', radius);\r\n                  el.setAttribute(\"material\",'color', actualColor);\r\n                  el.setAttribute('position', elPos);\r\n                  //el.setAttribute(\"opacity\", 0.5);\r\n                  //el.setAttribute(\"transparent\", true);\r\n                  eElem.appendChild(el);\r\n\r\n                  //events.\r\n                  var valuePart = _data[i].value;\r\n                  if (eElem._valueHandler)\r\n                      valuePart = eElem._valueHandler(element, datavalue);\r\n                  var keyPart = _data[i].key;\r\n                  if (eElem._keyHandler) {\r\n                      keyPart = eElem._keyHandler(datavalue);\r\n                  }\r\n                  //storing parts info..\r\n                  var barPart = {\r\n                      name: \"key:\" + keyPart + \" value:\" + valuePart,\r\n                      data: {\r\n                          key: _data[i].key,\r\n                          value: valuePart\r\n                      },\r\n                      position: { x: elPos.x, y: relativeY + MAX_HEIGHT + 0.25, z: elPos.z },\r\n                      origin_color: actualColor\r\n                  };\r\n                  el._partData = barPart;\r\n                  var myFunc = function (chart, element) {\r\n\r\n                      if (chart.el._dimension) {\r\n                          var myDim = chart.el._dimension;\r\n                          myDim.filterAll(null);\r\n                          myDim = myDim.filter(element.data.key);\r\n                          //llamada a redibujado de todo..\r\n                          var dashboard;\r\n                          if (chart.el._dashboard)\r\n                              dashboard = chart.el._dashboard;\r\n                          else if (chart.el._panel)\r\n                              dashboard = chart.el._panel._dashboard;\r\n\r\n                          if (dashboard) {\r\n                              //getting all charts\r\n                              var charts = dashboard.allCharts();\r\n                              for (var ch = 0 ; ch < charts.length; ch++) {\r\n                                  if (charts[ch] !== chart.el && charts[ch]._group) {\r\n                                      charts[ch].emit(\"data-loaded\");\r\n                                  }\r\n                              }\r\n\r\n                          } else {\r\n                              var childs = chart.el.parentElement.children;\r\n                              for (var ch = 0 ; ch < childs.length ; ch++) {\r\n                                  if (childs[ch] !== chart.el && childs[ch]._group) {\r\n                                      childs[ch].emit(\"data-loaded\");\r\n                                  }\r\n                              }\r\n                          }\r\n                      }\r\n                      //exp.\r\n                      chart.el.emit(\"filtered\", { element: element });\r\n                  };\r\n                  var myBindFunc = myFunc.bind(null, this, el._partData);\r\n                  el.addEventListener(\"click\", myBindFunc);\r\n                  //exp.\r\n                  //chart.el.emit(\"filtered\", { element: element });\r\n              }\r\n              relativeZ =relativeZ- zStep;\r\n          }\r\n          relativeZ = -MAX_RADIUS / 2;\r\n          relativeX += xStep;\r\n      }\r\n      this.addEvents();\r\n      var entLabels = this.addYLabels();\r\n      for (var lb = 0 ; lb < entLabels.length; lb++) {\r\n          eElem.appendChild(entLabels[lb]);\r\n      }\r\n      var zlabels = this.addZLabels();\r\n      for (var lb = 0 ; lb < zlabels.length; lb++) {\r\n          eElem.appendChild(zlabels[lb]);\r\n      }\r\n      if (componentData.gridson) {\r\n          this.addGrid();\r\n      }\r\n      if (componentData.title !== \"\") {\r\n          this.addTitle();\r\n      }\r\n  },\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  addGrid: function () {\r\n      var gridEntity = document.createElement('a-entity');\r\n      gridEntity.setAttribute('aframe-grid', {\r\n          height: this.data.height,\r\n          width: this.data.width,\r\n          ysteps: this.data.ysteps,\r\n          xsteps: this.data.xsteps\r\n      });\r\n      gridEntity.setAttribute(\"position\", { x: 0, y: 0, z: -this.data.depth });\r\n      this.el.appendChild(gridEntity);\r\n\r\n      var gridEntityZY = document.createElement('a-entity');\r\n      gridEntityZY.setAttribute('aframe-gridyz', {\r\n          height: this.data.height,\r\n          depth: this.data.depth,\r\n          ysteps: this.data.ysteps,\r\n          zsteps: this.el._zAxis.length\r\n      });\r\n\r\n\r\n      var gridEntityXZ = document.createElement('a-entity');\r\n      gridEntityXZ.setAttribute('aframe-gridxz', {\r\n          width: this.data.width,\r\n          depth: this.data.depth,\r\n          xsteps: this.data.xsteps,\r\n          zsteps: this.el._zAxis.length\r\n      });\r\n      this.el.appendChild(gridEntityZY);\r\n      this.el.appendChild(gridEntityXZ);\r\n  }, addYLabels: function () {\r\n      var numberOfValues;\r\n      var topYValue;\r\n      var getYLabel = function (component, step, value) {\r\n\r\n          var txt = value;\r\n          var curveSeg = 3;\r\n          var texto = document.createElement(\"a-entity\");\r\n          TEXT_WIDTH = 6;\r\n          //FIXME: depende del tama�o de letra...\r\n          var xPos = -0.7;\r\n          //var yPos = BasicChart._coords.y + step +  0.36778332145402703 / 2;\r\n          var yPos = step;\r\n          texto.setAttribute(\"text\", {\r\n              color: \"#000000\",\r\n              side: \"double\",\r\n              value: value.toFixed(2),\r\n              width: TEXT_WIDTH,\r\n              wrapCount: 30,\r\n              align: \"center\"\r\n          });\r\n          //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\r\n          // Positions the text and adds it to the THREEDC.scene\r\n          var labelpos = { x: xPos, y: yPos, z: -component.data.depth };\r\n          texto.setAttribute('position', labelpos);\r\n          return texto;\r\n      }\r\n      var _data;\r\n      var eElem = this.el;\r\n      if (this.el._data) {\r\n          _data = this.el._data;\r\n      } else {\r\n          _data = this.el._group.top(Infinity);\r\n      }\r\n      //using value and height accessor to retrieve max's\r\n      var arrays = _data.map(function (p) {\r\n          var myp = p;\r\n          return eElem._arrAccesor(p).map(function (o) {\r\n              return eElem._heightAccesor(o, myp);\r\n          });\r\n      });\r\n      topYValue = Math.max.apply(null, ([].concat.apply([], arrays)));\r\n      //Y AXIS\r\n      //var numerOfYLabels=Math.round(_chart._height/20);\r\n      var stepYValue = topYValue / this.data.ysteps;\r\n      var stepY = this.data.height / this.data.ysteps;\r\n      var labels = [];\r\n      for (var i = 0; i < this.data.ysteps + 1; i++) {\r\n          labels.push(getYLabel(this, i * stepY, i * stepYValue));\r\n      };\r\n\r\n      return labels;\r\n  },\r\n  addZLabels: function () {\r\n      if (!this.el._zAxis) return;\r\n      var getZLabel = function (component, step, labelkv) {\r\n          var curveSeg = 3;\r\n          var texto = document.createElement(\"a-entity\");\r\n          TEXT_WIDTH = 6;\r\n          //FIXME: depende del tama�o de letra...\r\n          var xPos = -1 * ((TEXT_WIDTH / 2) + 0.7);\r\n          //var yPos = BasicChart._coords.y + step +  0.36778332145402703 / 2;\r\n          var zPos = -step;\r\n          texto.setAttribute(\"text\", {\r\n              color: labelkv.value,\r\n              side: \"double\",\r\n              value: labelkv.key,\r\n              width: TEXT_WIDTH,\r\n              wrapCount: 30,\r\n              align: \"right\"\r\n          });\r\n          //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\r\n          // Positions the text and adds it to the THREEDC.scene\r\n          var labelpos = { x: xPos, y: 0, z: zPos };\r\n          texto.setAttribute('position', labelpos);\r\n          return texto;\r\n      }\r\n\r\n      var stepZ = this.data.depth / this.el._zAxis.length;\r\n      var labels = [];\r\n      for (var i = 0; i < this.el._zAxis.length; i++) {\r\n          labels.push(getZLabel(this, i * stepZ + stepZ / 2, this.el._zAxis[i]));\r\n      };\r\n\r\n      return labels;\r\n  },\n  addTitle: utils.addTitle,\n  addEvents: utils.addEvents,\n  remove: function () {\r\n      while (this.el.firstChild) {\r\n          this.el.removeChild(this.el.firstChild);\r\n      }\r\n      this.el.innerHTML = \"\";\r\n      this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\r\n\r\n  },\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/bubblechart/index.js\n// module id = 8\n// module chunks = 0","/* global AFRAME */\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\n/**\r\n * Panel component for A-Frame.\r\n */\r\nAFRAME.registerComponent('panel', {\r\n    schema: {\r\n        ncolumns: { default: 2, },\r\n        nrows: { default: 1 },\r\n        margin: { default: 6 },\r\n        title: { default: \"\" }\r\n    },\r\n    onDataLoaded: function (evt) {\r\n        console.log(this.name + \":Data Loaded!\");\r\n        this.reload = true;\r\n        this.update(this.data);\r\n    },\r\n    init: function () {\r\n        var self = this;\r\n        var el = this.el;\r\n        this.initialPositions = [];\r\n        var items = el.getChildEntities();\r\n        this.childrenItems = [];\r\n        //passing it to an array\r\n        for (var j = 0 ; j < items.length; j++) {\r\n            this.childrenItems.push(items[j]);\r\n        }\r\n        for (var i = 0; i < this.childrenItems.length; i++) {\r\n            var childEl = this.childrenItems[i];\r\n            var _getPositions = function (childElem) {\r\n                var position = childElem.getAttribute('position');\r\n                self.initialPositions.push([position.x, position.y, position.z]);\r\n            };\r\n            if (childEl.hasLoaded) { return _getPositions(childEl); }\r\n            childEl.addEventListener('loaded', _getPositions.bind(null, childEl));\r\n        };\r\n\r\n        //set callbacks\r\n        el.addEventListener('child-attached', this.__childAttachedCallback);\r\n        el.addEventListener('child-detached', this.__childdetachedCallback);\r\n        //called at render. take care\r\n        el.addEventListener('data-loaded', this.onDataLoaded.bind(this));\r\n    },\r\n    //private\r\n    __childAttachedCallback: function (evt) {\r\n        if (evt.detail.el.parentNode !== this || evt.detail.el.id === \"injectedTitle\") { return; }\r\n        this.components.panel.childrenItems.push(evt.detail.el);\r\n        this.emit(\"data-loaded\");\r\n    },\r\n    __childdetachedCallback: function (evt) {\r\n        if (this.components.panel.childrenItems.indexOf(evt.detail.el) === -1) { return; }\r\n        //delete the element in children and inipos variables.\r\n        var index = this.components.panel.childrenItems.indexOf(evt.detail.el);\r\n        this.components.panel.childrenItems.splice(index, 1);\r\n        this.components.panel.initialPositions.splice(index, 1);\r\n        this.emit(\"data-loaded\");\r\n    },\r\n    __setPositions(childrens, positions) {\r\n        for (var i = 0; i < childrens.length; i++) {\r\n            var child = childrens[i];\r\n            var position = positions[i];\r\n            child.setAttribute(\"position\", { x: position[0], y: position[1], z: position[2] });\r\n        }\r\n    },\r\n    update: function (oldData) {\r\n        if (this.reload) {\r\n            this.reload = false;\r\n            var children = this.childrenItems;\r\n            var data = this.data;\r\n            var el = this.el;\r\n            var numChildren = children.length;\r\n            //test\r\n            var defMargin = data.margin;\r\n            var initX = 0;\r\n            function searchdimensions(childEl) {\r\n                if (!childEl.hasLoaded) return 1;\r\n                var knownCharts = [\"piechart\", \"barchart\", \"smoothcurvechart\", \"geometry\"];\r\n                var found = false;\r\n                var i = 0;\r\n                var retDim = {};\r\n                while (!found && i < knownCharts.length) {\r\n                    var compObj = childEl.components[knownCharts[i]];\r\n                    if (compObj && compObj.data.depth) {\r\n                        retDim.z = compObj.data.depth;\r\n                        if (knownCharts[i] === \"piechart\") {\r\n                            retDim.x = compObj.data.radius * 2;\r\n                            retDim.y = compObj.data.radius * 2;\r\n                        } else {\r\n                            retDim.x = compObj.data.width;\r\n                            retDim.y = compObj.data.height;\r\n                        }\r\n                        found = true;\r\n                    }\r\n                    i++;\r\n\r\n                }\r\n                return retDim;\r\n            }\r\n            var i = 0;\r\n            var rowStep = this.el.components[\"geometry\"].data.height / this.data.nrows;\r\n            var colStep = this.el.components[\"geometry\"].data.width / this.data.ncolumns;\r\n            var nextColStep = 0, customcolstep = false;\r\n            for (var r = 0 ; r < this.data.nrows ; r++) {\r\n                var rowpoint = (-this.el.components[\"geometry\"].data.height / 2) + ((r) * rowStep);\r\n                for (c = 0; c < this.data.ncolumns; c++) {\r\n                    var posPoint = { x: 0, y: rowpoint, z: 0 };\r\n                    var rowpoint_mod = rowpoint;\r\n                    if (!this.childrenItems[i]) break;\r\n                    var child = this.childrenItems[i];\r\n                    var childdim = searchdimensions(child);\r\n                    var colpoint = (-this.el.components[\"geometry\"].data.width / 2) + ((c) * colStep);\r\n                    colpoint = customcolstep ? nextColStep : colpoint;\r\n                    customcolstep = false;\r\n                    if (childdim.x) {\r\n                        //todo: delete that offset.\r\n                        nextColStep = colpoint + childdim.x + 1.3;\r\n                        customcolstep = true;\r\n                    }\r\n                    //en el caso de nuestras graficas seria correcto as�\r\n                    colpoint = colpoint;\r\n                    rowpoint_mod = rowpoint;\r\n                    posPoint.x = colpoint;\r\n                    posPoint.y = rowpoint_mod;\r\n                    var depth = childdim.z / 2 + 0.05; //def depth panel + depth /2\r\n                    posPoint.z = depth;\r\n                    child.setAttribute(\"position\", posPoint);\r\n                    i++;\r\n                }\r\n                if (!this.childrenItems[i]) break;\r\n            }\r\n            //for (var i = 0 ; i < numChildren; i++) {\r\n\r\n            //    var posPoint = { x: initX, y: 0, z: 0 };\r\n            //    var child = children[i];\r\n            //    var depth = searchDepth(child) / 2 + 0.05; //def depth panel + depth /2\r\n            //    posPoint.z = depth;\r\n            //    child.setAttribute(\"position\", posPoint);\r\n            //    initX = initX + defMargin;\r\n            //}\r\n        }\r\n        if (this.data.title !== \"\") {\r\n            this.addTitle();\r\n        }\r\n    },\r\n    addTitle: function () {\r\n        var titleEntity = document.querySelector(\"#injectedTitle\");\r\n        var geomData = this.el.components[\"geometry\"].data;\r\n        if (titleEntity) {\r\n            titleEntity.setAttribute(\"title\", { caption: this.data.title, width: geomData ? geomData.width : 6 });\r\n            titleEntity.setAttribute(\"position\", { x: 0, y: (geomData ? geomData.height / 2 : 5) + 2, z: 0 });\r\n            return;\r\n        }\r\n        titleEntity = document.createElement(\"a-entity\");\r\n        titleEntity.id = \"injectedTitle\";\r\n        titleEntity.setAttribute(\"title\", { caption: this.data.title, width: geomData ? geomData.width : 6 });\r\n        titleEntity.setAttribute(\"position\", { x: 0, y: (geomData ? geomData.height / 2 : 5) + 2, z: 0 });\r\n        this.el.appendChild(titleEntity);\r\n    },\r\n    /**\r\n     * Reset positions.\r\n     */\r\n    remove: function () {\r\n        this.el.removeEventListener('child-attached', this.__childAttachedCallback);\r\n        this.el.removeEventListener('child-detached', this.__childdetachedCallback);\r\n        this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\r\n        //it doesn't works properly.\r\n        this.__setPositions(this.childrenItems, this.initialPositions);\r\n    }\r\n});\r\n//registering panel primitive\r\nAFRAME.registerPrimitive('a-panel', AFRAME.utils.extendDeep({}, AFRAME.primitives.getMeshMixin(), {\r\n    defaultComponents: {\r\n        panel: { ncolumns: 2, nrows: 1 },\r\n        geometry: {\r\n            primitive: \"box\",\r\n            width: 20,\r\n            height: 20,\r\n            depth: 0.1\r\n        },\r\n        material: {\r\n            color: \"gray\",\r\n            opacity: 0.3,\r\n            transparent: true,\r\n            flatShading: false\r\n        }\r\n    },\r\n    mappings: {\r\n        width: \"geometry.width\",\r\n        depth: \"geometry.depth\",\r\n        nrows: \"panel.nrows\",\r\n        ncolumns: \"panel.ncolumns\"\r\n\r\n    }\r\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/panel/index.js\n// module id = 9\n// module chunks = 0","/* global AFRAME */\nrequire(\"../title/index.js\")\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nvar utils = require(\"../../basefunctions.js\")\n/**\n * Piechart component for A-Frame.\n */\nAFRAME.registerComponent('piechart', {\n schema: {\n        radius: {default: 2.5 },\n        depth: { default: 0.5 },\n        color: { default: \"#fff\" },\n        title: {default: \"\"}\n    },\nonDataLoaded: utils.onDataLoaded,\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: utils.default_init,\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: utils.default_update,\ninitChart: function () {\n        var component = this.data;\n        var entityEl = this.el;\n        var aframedcEl = this.el;\n        if ((!entityEl._data || entityEl._data.length === 0) &&\n        !entityEl._group) return;\n        var relativeX, relativeY, relativeZ;\n        var thethainit = 0;\n        var COLORS = ['#2338D9', '#23A2D9', '#23D978', '#BAD923', '#D923D3', '#23D7D7', '#D72323', '#262C07'];\n        var radius = component.radius;\n        relativeX = radius;\n        relativeY = radius;\n        var _data;\n        if (entityEl._data) {\n            _data = entityEl._data;\n        } else {\n            _data = entityEl._group.top(Infinity);\n        }\n        relativeZ = component.depth / 2;\n        var suma = function (acc, val) {\n            return acc + val;\n        }\n        var dataValues = _data.map(function (b) { return b.value; });\n        var dataSum = dataValues.reduce(suma, 0);\n        var dataValues = dataValues.map(function (b) { return (b / dataSum); });\n\n \n        for (var j = 0; j < dataValues.length; j++) {\n            var myThethaLength = (360 * dataValues[j]);\n            var el = document.createElement(\"a-cylinder\");\n            //var geomcil = { primitive: \"cylinder\", thetaStart: thethainit, thetaLength: myThethaLength, radius: radius };\n            //el.setAttribute(\"geometry\", geomcil);\n            el.setAttribute(\"theta-start\", thethainit);\n            el.setAttribute(\"theta-length\", myThethaLength);\n            el.setAttribute(\"radius\", radius);\n            var angleLabel = (thethainit + (myThethaLength / 2));\n            //to rads\n            angleLabel = (angleLabel * 2 * Math.PI) / 360;\n            //min distance.\n            var actualColor =COLORS[j % COLORS.length];;\n            if (entityEl._colors)\n            {\n                actualColor = entityEl._colors.find(function (a) { return a.key === _data[j].key }).value;\n            }\n            el.setAttribute(\"color\", actualColor);\n            //el.setAttribute(\"material\", { color: actualColor });\n            el.setAttribute(\"scale\", { x: 1, y: component.depth, z: 1 });\n            el.setAttribute(\"position\", { x: relativeX, y: relativeY, z: 0 });\n            el.setAttribute(\"rotation\", { x: -90, y: 0, z: 0 });\n\n            thethainit = thethainit + myThethaLength;\n            //storing parts info..\n            var piePart = {\n                name: \"key:\" + _data[j].key + \" value:\" + (dataValues[j] * 100).toFixed(3),\n                data: {\n                    key: _data[j].key,\n                    value: _data[j].value\n                },\n                position: { x: relativeX, y: relativeY + radius + 0.25, z:  component.depth /2 },\n                origin_color: actualColor\n            };\n            el._partData = piePart;\n            entityEl.appendChild(el);\n            var myFunc = function (chart, element) {\n\n                if (chart.el._dimension) {\n                    var myDim = chart.el._dimension;\n                    myDim.filterAll(null);\n                    myDim = myDim.filter(element.data.key);\n                    //llamada a redibujado de todo..\n                    var dashboard;\n                    if (chart.el._dashboard)\n                        dashboard = chart.el._dashboard;\n                    else if (chart.el._panel)\n                        dashboard = chart.el._panel._dashboard;\n\n                    if (dashboard) {\n                        //getting all charts\n                        var charts = dashboard.allCharts();\n                        for (var ch = 0 ; ch < charts.length; ch++) {\n                            if (charts[ch] !== chart.el && charts[ch]._group) {\n                                charts[ch].emit(\"data-loaded\");\n                            }\n                        }\n\n                    } else {\n                        var childs = chart.el.parentElement.children;\n                        for (var ch = 0 ; ch < childs.length ; ch++) {\n                            if (childs[ch] !== chart.el && childs[ch]._group) {\n                                childs[ch].emit(\"data-loaded\");\n                            }\n                        }\n                    }\n                }\n                //exp.\n                chart.el.emit(\"filtered\", { element: element });\n            };\n            var myBindFunc = myFunc.bind(null, this, el._partData);\n            el.addEventListener(\"click\", myBindFunc);\n        }\n        this.addEvents();\n        if (component.title !== \"\") {\n            this.addTitle();\n        }\n    },\n\n    addTitle: function () {\n        var titleEntity = document.createElement(\"a-entity\");\n        titleEntity.setAttribute(\"title\", { caption: this.data.title, width: Math.max(this.data.radius,6) });\n        titleEntity.setAttribute(\"position\", { x: this.data.radius, y: (this.data.radius * 2) + 1, z: this.data.depth / 2 });\n        this.el.appendChild(titleEntity);\n    },\n    addEvents: utils.addEvents,\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () {    \n        this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\n        while (this.el.firstChild) {\n            this.el.removeChild(this.el.firstChild);\n        }\n        this.el.innerHTML = \"\";\n\t},\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/piechart/index.js\n// module id = 10\n// module chunks = 0","/* global AFRAME */\nrequire(\"../aframe-grid/index.js\")\nrequire(\"../title/index.js\")\nvar utils = require(\"../../basefunctions.js\")\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\n/**\n * Smoothcurvechart component for A-Frame.\n */\nAFRAME.registerComponent('smoothcurvechart', {\n    schema: {\r\n        gridson: { default: true },\r\n        xsteps: { default: 5 },\r\n        ysteps: { default: 5 },\r\n        width: { default: 10 },\r\n        height: { default: 10 },\r\n        depth: { default: 0.5 },\r\n        color: { default: '#00FF00' }\r\n    },\n    onDataLoaded: utils.onDataLoaded,\n  \n\n  /**\n   * Set if component needs multiple instancing.\n   */\n  multiple: false,\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: utils.default_init,\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: utils.default_update,\n  initChart: function () {\r\n      var eElem = this.el;\r\n      var componentData = this.data;\r\n\r\n      var eElem = this.el;\r\n      var componentData = this.data;\r\n      if ((!eElem._data || eElem._data.length === 0) &&\r\n         !eElem._group) return;\r\n      var __calculateY = function (initialY, height) {\r\n          var returnedY = height / 2 + initialY;\r\n          return returnedY;\r\n      };\r\n      var scale = function () {\r\n          var max;\r\n          var p = [];\r\n          max = Math.max.apply(null, arguments);\r\n          for (var i = 0 ; i < arguments.length; i++) {\r\n              p.push((arguments[i] / max));\r\n          }\r\n          return p;\r\n      };\r\n      var _data;\r\n      if (eElem._data && eElem._data.length > 0) {\r\n          _data = eElem._data;\r\n      } else if (eElem._group) {\r\n          _data = eElem.sortCFData();\r\n      }\r\n      var dataValues = _data.map(function (a) { return a.value; });;\r\n\r\n      COLORS = ['#2338D9', '#23A2D9', '#23D978', '#BAD923', '#D923D3'];\r\n      var yMaxPoint = 0;\r\n      dataValues = scale.apply(null, dataValues);\r\n\r\n      var step = componentData.width / dataValues.length;\r\n      var x = 0;\r\n      var material = new THREE.LineBasicMaterial({\r\n          color: this.data.color\r\n      });\r\n      var curve, vertices = [];\r\n\r\n\r\n      for (var i = 0; i < dataValues.length; i++) {\r\n          var point = document.createElement('a-sphere');\r\n          //point.setAttribute('width', 0.4);\r\n          //point.setAttribute('height', 0.4);\r\n          //point.setAttribute('depth', 0.4);\r\n          point.setAttribute('radius', 0.2);\r\n          point.setAttribute(\"color\", componentData.color);\r\n          vertices.push(\r\n           new THREE.Vector3(x, (componentData.height * dataValues[i]), 0)\r\n         );\r\n          point.setAttribute(\"position\", { x: x, y: (componentData.height * dataValues[i]), z: 0.2 });\r\n          eElem.appendChild(point);\r\n          //storing parts info..\r\n          var boxPart = {\r\n              name: \"key:\" + _data[i].key + \" value:\" + _data[i].value,\r\n              data: {\r\n                  key: _data[i].key,\r\n                  value: _data[i].value\r\n              },\r\n              position: { x: x, y: componentData.height + 0.25, z: 0 },\r\n              origin_color: componentData.color\r\n          };\r\n          point._partData = boxPart;\r\n\r\n          x += step;\r\n\r\n\r\n      };\r\n\r\n      curve = new THREE.CatmullRomCurve3(vertices);\r\n\r\n      var geometry = new THREE.Geometry();\r\n      geometry.vertices = curve.getPoints(512);\r\n      var curveObject = new THREE.Line(geometry, material);\r\n      eElem.setObject3D('mesh', curveObject);\r\n      this.addEvents();\r\n      if (componentData.gridson) {\r\n          this.addGrid();\r\n      }\r\n\r\n  },\r\n  addGrid: function (entityEl) {\r\n      var gridEntity = document.createElement('a-entity');\n      gridEntity.setAttribute('aframe-grid', {\r\n          height: this.data.height,\n          width: this.data.width,\n          ysteps: this.data.ysteps,\n          xsteps: this.data.xsteps\r\n      });\n      gridEntity.setAttribute(\"position\", { x: 0, y: 0, z: -this.data.depth / 2 });\n      this.el.appendChild(gridEntity);\r\n  },\n  addTitle: utils.addTitle,\n  addEvents: utils.addEvents,\n  addYLabels : function () {\n      var numberOfValues;\n      var topYValue;\n      var getYLabel = function(component, step, value) {\n\n          var txt = value;\n          var curveSeg = 3;\n          var texto = document.createElement(\"a-entity\");\n          TEXT_WIDTH = 6;\n          //FIXME: depende del tama�o de letra...\n          var xPos =     -0.7;\n          //var yPos = BasicChart._coords.y + step +  0.36778332145402703 / 2;\n          var yPos =   step;\n          texto.setAttribute(\"text\", {\n              color: \"#000000\",\n              side: \"double\",\n              value: value.toFixed(2),\n              width: TEXT_WIDTH,\n              wrapCount: 30,\n              align: \"center\"\n          });\n          //texto.setAttribute('geometry', { primitive: 'plane', width: 'auto', height: 'auto' });\n          // Positions the text and adds it to the THREEDC.scene\n          var labelpos = { x: xPos, y: yPos, z: -component.data.depth / 2 };\n          texto.setAttribute('position', labelpos); \n          return texto;\n      } \n      var _data;\n      var eElem = this.el;\n      if (this.el._data) {\n          _data = this.el._data;\n      } else {\n          _data = this.el._group.top(Infinity);\n      }\n      var dataValues = _data.map(function (a) {\n          if (eElem._valueHandler) {\n              return eElem._valueHandler(a);\n          }\n          return a.value;\n      });;\n      topYValue = Math.max.apply(null, dataValues);\n      numberOfValues = dataValues.length;\n      //Y AXIS\n      //var numerOfYLabels=Math.round(_chart._height/20);\n      var stepYValue= topYValue/this.data.ysteps;\n      var stepY=this.data.height/this.data.ysteps;\n      var labels = [];\n      for (var i = 0; i <this.data.ysteps +1; i++) {\n          labels.push(getYLabel(this, i * stepY, i * stepYValue));\n      };\n        \n      return labels;\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () {\r\n      while (this.el.firstChild) {\r\n          this.el.removeChild(this.el.firstChild);\r\n      }\n      this.el.innerHTML = \"\";\n      this.el.removeEventListener('data-loaded', this.onDataLoaded.bind(this));\r\n\n  },\n\n  /**\n   * Called on each scene tick.\n   */\n  // tick: function (t) { },\n\n  /**\n   * Called when entity pauses.\n   * Use to stop or remove any dynamic or background behavior such as events.\n   */\n  pause: function () { },\n\n  /**\n   * Called when entity resumes.\n   * Use to continue or add any dynamic or background behavior such as events.\n   */\n  play: function () { }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/smoothcurvechart/index.js\n// module id = 11\n// module chunks = 0","﻿var extendDeep = AFRAME.utils.extendDeep;\r\nrequire(\"./components/aframe-grid/index.js\");\r\nrequire(\"./components/aframe-gridxz/index.js\");\r\nrequire(\"./components/aframe-gridyz/index.js\");\r\nrequire(\"./components/barchart/index.js\");\r\nrequire(\"./components/barchart3d/index.js\");\r\nrequire(\"./components/barchartstack/index.js\");\r\nrequire(\"./components/bubblechart/index.js\");\r\nrequire(\"./components/panel/index.js\");\r\nrequire(\"./components/smoothcurvechart/index.js\");\r\nrequire(\"./components/piechart/index.js\");\r\nrequire(\"./components/title/index.js\");\r\nfunction aframedc() {\r\n    var aframedc = {\r\n        version: '0.1.0',\r\n        DEFAULT_CHART_GROUP: \"__defaultgroup__\"\r\n    };\r\n\r\n    aframedc.addDashBoard = function (AFRAMEscene) {\r\n        //ensuring camera has mouse-cursor.\r\n        var canvas = AFRAMEscene.canvas;\r\n        var _ensuremousecursor = function (scene) {\r\n            var camera = scene.querySelector(\"[camera]\");\r\n            if (!camera) {\r\n                camera = createcamera();\r\n                scene.appendChild(camera);\r\n            } else if (!camera.getAttribute(\"mouse-cursor\")) {\r\n                var _setcursor = function () { camera.setAttribute(\"mouse-cursor\", \"\") };\r\n                if (camera.hasLoaded) {\r\n                    _setcursor();\r\n                } else {\r\n                    //camera object 3d has to be loaded.\r\n                    camera.addEventListener(\"loaded\", _setcursor());\r\n                }\r\n            }\r\n        }\r\n        if (!canvas) {\r\n            AFRAMEscene.addEventListener('render-target-loaded', _ensuremousecursor.bind(null, AFRAMEscene));\r\n        }\r\n        return dashBoard(AFRAMEscene);\r\n    }\r\n    var dashBoard = function (scene) {\r\n        var dashEntity = document.createElement(\"a-entity\");\r\n        dashEntity.id = \"aframedc\";\r\n        scene.appendChild(dashEntity);\r\n        var odashboard = dashEntity;\r\n        odashboard.chartRegistry = (function () {\r\n            var _chartMap = {};\r\n            function initializeChartGroup(group) {\r\n                if (!group) {\r\n                    group = aframedc.DEFAULT_CHART_GROUP;\r\n                }\r\n\r\n                if (!_chartMap[group]) {\r\n                    _chartMap[group] = [];\r\n                }\r\n\r\n                return group;\r\n            }\r\n\r\n            return {\r\n                register: function (chart, group) {\r\n                    group = initializeChartGroup(group);\r\n                    _chartMap[group].push(chart);\r\n                },\r\n                list: function (group) {\r\n                    group = initializeChartGroup(group);\r\n                    return _chartMap[group];\r\n                }\r\n            };\r\n        })();\r\n        odashboard.addPanel = function (panel) {\r\n            this.chartRegistry.register(panel);\r\n            panel._dashboard = this;\r\n            this.appendChild(panel);\r\n            var listOfCharts = panel.chartRegistry.list();\r\n            for (var i = 0; i < listOfCharts.length; i++) {\r\n                panel.appendChild(listOfCharts[i]);\r\n            }\r\n            panel.render();\r\n            return this;\r\n        };\r\n        odashboard.addChart = function (chart, coords) {\r\n            this.chartRegistry.register(chart);\r\n            this.appendChild(chart);\r\n            chart._dashboard = this;\r\n            if (coords) {\r\n                chart.setAttribute(\"position\", coords);\r\n            }\r\n            chart.render();\r\n            return this;\r\n        };\r\n        odashboard.allCharts = function () {\r\n            var aux_list = [];\r\n            var dashlist = this.chartRegistry.list();\r\n            for (var i = 0; i < dashlist.length; i++) {\r\n                if (!dashlist[i].addChart) {\r\n                    //not a panel..\r\n                    aux_list.push(dashlist[i]);\r\n                } else {\r\n                    var panelcharts = dashlist[i].chartRegistry.list();\r\n                    for (var j = 0 ; j < panelcharts.length ; j++) {\r\n                        aux_list.push(panelcharts[j]);\r\n                    }\r\n                }\r\n            }\r\n            return aux_list;\r\n        };\r\n        return odashboard;\r\n    };\r\n    var createcamera = function () {\r\n        //taking existing camera.Adding my custom components.\r\n        var camera = document.createElement(\"a-entity\");\r\n        camera.setAttribute(\"camera\", {});\r\n        camera.setAttribute(\"look-controls\", {});\r\n        camera.setAttribute(\"wasd-controls\", {});\r\n        //camera object 3d has to be loaded.\r\n        camera.addEventListener(\"loaded\", function () { camera.setAttribute(\"mouse-cursor\", \"\") });\r\n        return camera;\r\n    }\r\n    aframedc.dashboard = function (containerdiv) {\r\n        var scene = document.createElement(\"a-scene\");\r\n        scene.setAttribute('embedded', {});\r\n        //creating camera \r\n        var camera = createcamera();\r\n\r\n        scene.appendChild(camera);\r\n        containerdiv.appendChild(scene);\r\n        return dashBoard(scene);\r\n    }\r\n    var baseMixin = {\r\n        componentName: \"\", //filled on every chart\r\n        render: function () {\r\n            var thatel = this;\r\n            function __emitrender() {\r\n                thatel.emit('data-loaded');\r\n            };\r\n            if (this.hasLoaded) {\r\n                __emitrender();\r\n            } else {\r\n                this.addEventListener('loaded', __emitrender);\r\n            }\r\n            return this;\r\n        },\r\n        data: function (newdata) {\r\n            this._data = newdata;\r\n            return this;\r\n        },\r\n        dimension: function (newdata) {\r\n            this._dimension = newdata;\r\n            return this;\r\n        },\r\n        group: function (newdata) {\r\n            this._group = newdata;\r\n            return this;\r\n        },\r\n        depth: function (newdepth) {\r\n            this.setAttribute(this.componentName, \"depth\", newdepth);\r\n            return this;\r\n\r\n        },\r\n        color: function (newcolor) {\r\n            this.setAttribute(this.componentName, \"color\", newcolor);\r\n            return this;\r\n        },\r\n        setTitle: function (newTitle) {\r\n            this.setAttribute(this.componentName, \"title\", newTitle);\r\n            return this;\r\n        },\r\n        valueAccessor: function (valueHandler) {\r\n            this._valueHandler = valueHandler;\r\n            return this;\r\n        },\r\n        keyAccessor: function (keyHandler) {\r\n            this._keyHandler = keyHandler;\r\n            return this;\r\n        },\r\n\r\n    };\r\n    aframedc.Panel = function () {\r\n        var compName = \"panel\";\r\n        this.componentName = compName;\r\n        var element = document.createElement('a-panel');\r\n        var oPanel = element;\r\n        oPanel.chartRegistry = (function () {\r\n            var _chartMap = {};\r\n            function initializeChartGroup(group) {\r\n                if (!group) {\r\n                    group = aframedc.DEFAULT_CHART_GROUP;\r\n                }\r\n\r\n                if (!_chartMap[group]) {\r\n                    _chartMap[group] = [];\r\n                }\r\n\r\n                return group;\r\n            }\r\n\r\n            return {\r\n                register: function (chart, group) {\r\n                    group = initializeChartGroup(group);\r\n                    _chartMap[group].push(chart);\r\n                },\r\n                list: function (group) {\r\n                    group = initializeChartGroup(group);\r\n                    return _chartMap[group];\r\n                }\r\n            };\r\n        })();\r\n\r\n        oPanel.render = function () {\r\n            var thatel = this;\r\n            function __emitrender() {\r\n                thatel.emit('data-loaded');\r\n                var listOfCharts = thatel.chartRegistry.list();\r\n                for (var i = 0; i < listOfCharts.length; i++) {\r\n                    listOfCharts[i].render();\r\n                }\r\n            };\r\n            if (this.hasLoaded) {\r\n                __emitrender();\r\n            } else {\r\n                this.addEventListener('loaded', __emitrender);\r\n            }\r\n            return this;\r\n        };\r\n        oPanel.width = function (newwidth) {\r\n            this.setAttribute(\"geometry\", \"width\", newwidth);\r\n            return this;\r\n        };\r\n        oPanel.height = function (newwidth) {\r\n            this.setAttribute(\"geometry\", \"height\", newwidth);\r\n            return this;\r\n        };\r\n        oPanel.nrows = function (newn) {\r\n            this.setAttribute(this.componentName, \"nrows\", newn);\r\n            return this;\r\n        };\r\n        oPanel.ncolumns = function (newn) {\r\n            this.setAttribute(this.componentName, \"ncolumns\", newn);\r\n            return this;\r\n        };\r\n        oPanel.setTitle = function (newtitle) {\r\n            this.setAttribute(this.componentName, \"title\", newtitle);\r\n            return this;\r\n        }\r\n        //unique properties and methods\r\n        oPanel.componentName = compName;\r\n        oPanel.addChart = function (chart) {\r\n            this.chartRegistry.register(chart);\r\n            this._panel = this;\r\n            if (oPanel.hasLoaded && oPanel.sceneEl) {\r\n                this.appendChild(chart);\r\n                chart.render();\r\n            }\r\n        };\r\n        return oPanel;\r\n    };\r\n\r\n    aframedc.pieChart = function () {\r\n        var compName = \"piechart\";\r\n        var element = document.createElement('a-entity');\r\n        element.setAttribute(compName, {});\r\n        var opieChart = element;\r\n        opieChart =  extendDeep(opieChart, baseMixin);\r\n        //unique properties and methods\r\n        opieChart.componentName = compName;\r\n        opieChart.radius = function (newradius) {\r\n            this.setAttribute(this.componentName, \"radius\", newradius);\r\n            return this;\r\n        };\r\n        opieChart.color = function (newcolordict) {\r\n            this._colors = newcolordict;\r\n            return this;\r\n        };\r\n        return opieChart;\r\n    };\r\n    aframedc.barChart = function () {\r\n        var compName = \"barchart\";\r\n        var element = document.createElement('a-entity');\r\n        element.setAttribute(compName, {});\r\n        var obarChart = element;\r\n        obarChart = extendDeep(obarChart, baseMixin);\r\n        //unique properties and methods\r\n        obarChart.componentName = compName;\r\n        obarChart.width = function (newradius) {\r\n            this.setAttribute(this.componentName, \"width\", newradius);\r\n            return this;\r\n        };\r\n        obarChart.height = function (newradius) {\r\n            this.setAttribute(this.componentName, \"height\", newradius);\r\n            return this;\r\n        };\r\n        return obarChart;\r\n    };\r\n\r\n    aframedc.barChartstack = function () {\r\n        var compName = \"barchartstack\";\r\n        var element = document.createElement('a-entity');\r\n        element.setAttribute(compName, {});\r\n        var obarChart = element;\r\n        obarChart = extendDeep(obarChart, baseMixin);\r\n        //unique properties and methods\r\n        obarChart.componentName = compName;\r\n        obarChart.width = function (newradius) {\r\n            this.setAttribute(this.componentName, \"width\", newradius);\r\n            return this;\r\n        };\r\n        obarChart.height = function (newradius) {\r\n            this.setAttribute(this.componentName, \"height\", newradius);\r\n            return this;\r\n        };\r\n        obarChart.orderFunction = function (newcallback) {\r\n            this._maxfunc = newcallback;\r\n            return this;\r\n        }\r\n        obarChart.color = function (newcolorDict) {\r\n            this._colors = newcolorDict;\r\n            return this;\r\n        }\r\n        return obarChart;\r\n    };\r\n\r\n    aframedc.bubbleChart = function () {\r\n        var compName = \"bubblechart\";\r\n        var element = document.createElement('a-entity');\r\n        element.setAttribute(compName, {});\r\n        var obubbleChart = element;\r\n        obarChart = extendDeep(obubbleChart, baseMixin);\r\n        //unique properties and methods\r\n        obubbleChart.componentName = compName;\r\n        obubbleChart.width = function (newradius) {\r\n            this.setAttribute(this.componentName, \"width\", newradius);\r\n            return this;\r\n        };\r\n        obubbleChart.height = function (newradius) {\r\n            this.setAttribute(this.componentName, \"height\", newradius);\r\n            return this;\r\n        };\r\n        obubbleChart.heightAccessor = function (heightfunc) {\r\n            this._heightAccesor = heightfunc;\r\n            return this;\r\n        }\r\n        obubbleChart.radiusAccessor = function (rfunc) {\r\n            this._radiusAccesor = rfunc;\r\n            return this;\r\n        }\r\n        obubbleChart.arrayAccessor = function (arrfunc) {\r\n            this._arrAccesor = arrfunc;\r\n            return this;\r\n        }\r\n        obubbleChart.zAxis = function (newzaxis) {\r\n            this._zAxis = newzaxis;\r\n            return this;\r\n        }\r\n        return obubbleChart;\r\n    };\r\n    aframedc.barChart3d = function () {\r\n        var compName = \"barchart3d\";\r\n        var element = document.createElement('a-entity');\r\n        element.setAttribute(compName, {});\r\n        var obarChart = element;\r\n        obarChart = extendDeep(obarChart, baseMixin);\r\n        //unique properties and methods\r\n        obarChart.componentName = compName;\r\n        obarChart.width = function (newradius) {\r\n            this.setAttribute(this.componentName, \"width\", newradius);\r\n            return this;\r\n        };\r\n        obarChart.height = function (newradius) {\r\n            this.setAttribute(this.componentName, \"height\", newradius);\r\n            return this;\r\n        };\r\n        obarChart.color = function (newcolorDict) {\r\n            this._colors = newcolorDict;\r\n            return this;\r\n        }\r\n        obarChart.heightAccessor = function (heightfunc) {\r\n            this._heightAccesor = heightfunc;\r\n            return this;\r\n        }\r\n        obarChart.arrayAccessor = function (arrfunc) {\r\n            this._arrAccesor = arrfunc;\r\n            return this;\r\n        }\r\n        obarChart.zAxis = function (newcolorDict) {\r\n            this._zAxis = newcolorDict;\r\n            return this;\r\n        }\r\n        return obarChart;\r\n    };\r\n\r\n\r\n    aframedc.smoothCurveChart = function () {\r\n        var compName = \"smoothcurvechart\";\r\n        var element = document.createElement('a-entity');\r\n        element.setAttribute(compName, {});\r\n        var oCurveChart = element;\r\n        oCurveChart = extendDeep(oCurveChart, baseMixin);\r\n        //unique properties and methods\r\n        oCurveChart.componentName = compName;\r\n        oCurveChart.width = function (newradius) {\r\n            this.setAttribute(this.componentName, \"width\", newradius);\r\n            return this;\r\n        };\r\n        oCurveChart.height = function (newradius) {\r\n            this.setAttribute(this.componentName, \"height\", newradius);\r\n            return this;\r\n        };\r\n        oCurveChart.gridsOn = function (havegrid) {\r\n            this.setAttribute(this.componentName, \"gridson\", havegrid);\r\n            return this;\r\n        };\r\n        return oCurveChart;\r\n    };\r\n\r\n    return aframedc;\r\n};\r\n\r\nmodule.exports = aframedc();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}